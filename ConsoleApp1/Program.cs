using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using CppSharp;
using CppSharp.AST;
using CppSharp.Generators;
using SMLib;
using CallingConvention = System.Runtime.InteropServices.CallingConvention;
using SmPointer = System.IntPtr;

namespace ConsoleApp1
{
    // ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
    namespace SMLib
    {
    }


    class Program
    {
        static async Task Main(string[] args)
        {
            // ConsoleDriver.Run(new XsmpDriver());


            IDisposable k = null;
            k = new XsmpClient();
             Console.ReadLine();
            k?.Dispose();
        }

        public class XsmpDriver : ILibrary
        {
            public void Preprocess(Driver driver, ASTContext ctx)
            {
            }

            public void Postprocess(Driver driver, ASTContext ctx)
            {
            }

            public void Setup(Driver driver)
            {
                var options = driver.Options;
                options.GeneratorKind = GeneratorKind.CSharp;
                var module = options.AddModule("libSM.so.6");


                module.IncludeDirs.Add(@"/usr/include/X11/SM");
                module.Headers.Add("SMlib.h");


                module.LibraryDirs.Add(@"/usr/lib/x86_64-linux-gnu/");
                module.Libraries.Add("libSM.so");

                // /usr/lib/x86_64-linux-gnu/
            }

            public void SetupPasses(Driver driver)
            {
            }
        }

        public unsafe class XsmpClient : IDisposable
        {
            
            public static void SmsSaveYourselfRequestProc(IntPtr __0, IntPtr __1, int __2, int __3, int __4, int __5)

            
            {
                Console.WriteLine("ugh");
            }
            
            private const ulong SmcSaveYourselfProcMask = (1L << 0);
            private const ulong SmcDieProcMask = (1L << 1);
            private const ulong SmcSaveCompleteProcMask = (1L << 2);
            private const ulong SmcShutdownCancelledProcMask = (1L << 3);

            private readonly IntPtr _smcConn;

            public static void ShutdownCancelled(SmcConn a,
                SmPointer b
            )
            {
            }


            public static void SaveYourself(
                IntPtr smcConn,
                IntPtr clientData,
                int saveType,
                bool shutdown,
                int interactStyle,
                bool fast
            )
            {
            }

            
            [StructLayout(LayoutKind.Sequential, Size = 64)]
            public struct SmcCallbacksX
            {
                public delegate* <
                    IntPtr /* smcConn */,
                    IntPtr /* clientData */,
                    int /* saveType */,
                    bool /* shutdown */,
                    int /* interactStyle */,
                    bool /* fast */,
                    void > save_yourself;
            
                public IntPtr save_yourself_client_data;
            
                public delegate* unmanaged[Cdecl] <
                    IntPtr /* smcConn */,
                    IntPtr /* clientData */,
                    void> die;
            
                public IntPtr die_client_data;
            
                public delegate* < IntPtr /* smcConn */,
                    IntPtr /* clientData */,
                    void> save_complete;
            
                public IntPtr save_complete_client_data;
            
                public delegate* < IntPtr /* smcConn */,
                    IntPtr /* clientData */,
                    void> shutdown_cancelled;
            
                public IntPtr shutdown_cancelled_client_data;
            }
            
            

            public XsmpClient()
            {
                var sd = new SmcCallbacks();
 
                var errorBuf = new sbyte[127];
                fixed (sbyte* p = errorBuf)
                {
                    var ptr = (IntPtr) p;
                    var ss = SMlib.SmcOpenConnection(null, IntPtr.Zero, 1, 0,
                        SmcSaveYourselfProcMask |
                        SmcSaveCompleteProcMask |
                        SmcShutdownCancelledProcMask |
                        SmcDieProcMask,
                        sd,
                        out var aa, 
                        out var bb, errorBuf.Length, p);
                    
                    
                    _smcConn = ss.__Instance;



                    var x = SMlib.SmcProtocolVersion(ss);
                    var y = SMlib.SmcProtocolRevision(ss);
                    var z = SMlib.SmcVendor(ss);
                    var zz = SMlib.SmcRelease(ss);
                    var zza = SMlib.SmcClientID(ss);

                }

                if (_smcConn == IntPtr.Zero)
                {
                    var errorString = Encoding.ASCII.GetString(errorBuf.Cast<byte>().ToArray());
                    Console.WriteLine($"Error! {errorString}");
                }

                var progName = "Avalonia XSMP Client";
                var progNameBytes = Encoding.ASCII.GetBytes(progName);


                fixed (byte* asd = &progNameBytes[0])
                {
                    var smname = new SmPropValue {Length = progNameBytes.Length, Value = (IntPtr) asd};

                    var nameBa = Encoding.ASCII.GetBytes("SmProgram").Cast<sbyte>().ToArray();
                    var typeBa = Encoding.ASCII.GetBytes("SmARRAY8").Cast<sbyte>().ToArray();

                    fixed (sbyte* nameBaPtr = &nameBa[0])
                    fixed (sbyte* typeBaPtr = &typeBa[0])
                    {
                        var smnameprop = new SmProp {Name = nameBaPtr, Type = typeBaPtr, Vals = smname, NumVals = 1};
                        SMlib.SmcSetProperties(SmcConn.__GetOrCreateInstance(_smcConn), 1, smnameprop);
                    }
                }
            }
  
            [DllImport("libSM.so.6", CharSet = CharSet.Ansi)]
            public static extern IntPtr SmcOpenConnection(IntPtr networkId,
                IntPtr content,
                int xsmpMajorRev,
                int xsmpMinorRev,
                ulong mask,
                IntPtr callbacks,
                out string previousId,
                out IntPtr clientIdRet,
                int errorLength,
                IntPtr errorStringRet);

            public enum SmcCloseStatus
            {
                SmcClosedNow,
                SmcClosedAsap,
                SmcConnectionInUse
            }


            [DllImport("libSM.so.6", CharSet = CharSet.Ansi, CallingConvention = CallingConvention.StdCall)]
            public static extern SmcCloseStatus SmcCloseConnection(
                IntPtr smcConn,
                int count,
                string[] reasonMsgs
            );


            // [DllImport("libSM.so.6", CharSet = CharSet.Ansi, CallingConvention = CallingConvention.StdCall)]
            // public static extern void SmcSetProperties(
            //     SmcConn smcConn,
            //     int numProps,
            //     SmProp** props
            // );

            public void Dispose()
            {
                if (_smcConn != IntPtr.Zero)
                {
                    var stat = SmcCloseConnection(_smcConn, 0, new[]
                    {
                        "Test 1",
                        "Test 2"
                    });
                }
            }
        }
    }
}